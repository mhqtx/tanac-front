# Cursor Rules Overview

This project uses comprehensive Cursor rules to ensure consistent development practices across the Next.js application. The rules are organized into specific areas of development.

## Available Rules

### 1. [Core Development Principles](mdc:my-rule.mdc)

- General approach and coding philosophy
- Code implementation guidelines
- Always applied to all files

### 2. [Project Structure](mdc:project-structure.mdc)

- Overview of the Next.js 15 project architecture
- Key files and their purposes
- Dependencies and technology stack
- Always applied to all files

### 3. [Coding Standards](mdc:coding-standards.mdc)

- TypeScript and React best practices
- Component structure patterns
- Event handler naming conventions
- Accessibility guidelines
- Applied to TypeScript and JavaScript files

### 4. [Styling Guidelines](mdc:styling-guidelines.mdc)

- TailwindCSS best practices
- Class organization patterns
- Design system guidelines
- Responsive design principles
- Applied to TypeScript, JavaScript, and CSS files

### 5. [WordPress Integration](mdc:wordpress-integration.mdc)

- API data fetching patterns
- WordPress data types and ACF fields
- Image handling and optimization
- Error handling strategies
- Applied to TypeScript and JavaScript files

### 6. [Performance Optimization](mdc:performance-optimization.mdc)

- Next.js performance best practices
- Image optimization techniques
- Component optimization strategies
- SEO considerations
- Applied to TypeScript and JavaScript files

### 7. [Development Workflow](mdc:development-workflow.mdc)

- Project setup and environment
- Available scripts and commands
- File structure conventions
- Git workflow and deployment
- Always applied to all files

## How to Use These Rules

1. **Always Applied Rules**: These rules are automatically applied to all files and provide general guidance
2. **File-Specific Rules**: These rules apply only to specific file types (e.g., TypeScript files)
3. **Context-Aware**: Rules are applied based on the file being edited and the context of the request

## Key Technologies

- **Next.js 15** with App Router
- **TypeScript** with strict mode
- **TailwindCSS v4** for styling
- **WordPress REST API** for content management
- **React 19** with modern patterns

## Quick Reference

- Use `clsx` for conditional classes
- Implement proper TypeScript interfaces
- Use early returns for better readability
- Follow accessibility guidelines
- Optimize images with Next.js Image component
- Handle WordPress API errors gracefully
- Use descriptive naming conventions
  description:
  globs:
  alwaysApply: true

---
